2.11:
* #218 Make Hazelcast optional
* #221 xitrum.conf: Improve config of template engine, cache, and session store
* #159 Support dot in route
* #206 Support index.html fallback
* #209 Add automatic OPTIONS request handling for the whole site
* #71  Add automatic CORS request handling for the whole site
* #204 Log Xitrum additional routes separately from app routes
* #223 Rename logger to log
* #195 Rename xitrumCSS to xitrumCss
* #216 Remove package xitrum.mq
* #211 Remove xitrum/routes.js
* #220 Optimize xitrum.util.Loader.bytesFromInputStream
* #227 Optimize xitrum.util.Json by avoid creating formats at every call
* #196 Swagger: Rename Optional<ValueType><ParamType> to Opt<ValueType><ParamType>, ex: OptStringQuery
* #198 Swagger: Add inheritance
* #199 Swagger: Add notes
* #201 Update Hazelcast from 3.0.2 to 3.1
* #214 Update Glokka from 1.2 to 1.3 (and akka-slf4j to 2.2.3)
* #200 Update Scaposer from 1.2 to 1.3
* #222 Update Knockout.js from 2.3.0 to 3.0.0

2.10:
* #180 Swagger: Add option to xitrum.conf to disable Swagger Doc
* #181 Swagger: Improve annotations
* #182 Swagger: Cache result on 1st access
* #185 Swagger: Include Swagger UI
* #183 Fix: Dead actor sends Terminate message to itself
* #194 Fix: Wrong version (2.10.0) of scala-compiler, scala-reflect, and scalap is used
* #51  Add bin/runner.bat for Windows
* #93  Readd indices for xitrum.mq.MessageQueue
* #179 Add route aliasing
* #189 Add option to xitrum.conf to configure request maxInitialLineLength
* #193 Add request.staticFilePathRegex to xitrum.conf
* #172 Replace Java annotations with Scala annotations
* #191 Placeholder in URL can't be empty
* #132 Log network card interface
* #192 Update Twitter Chill from 0.3.2 to 0.3.4

2.9:
* #169 Add Swagger Doc support
* #173 Speed up routing by caching latest matched routes
* #174 Redirect Akka log to SLF4J
* #175 Optimize static file serving by readding /public/ prefix
* #176 Change SkipCSRFCheck to SkipCsrfCheck; same for antiCSRFMeta etc.
* #177 Make routes.cache loading more robust with class name change
* #168 Better support for custom handler
* #167 Update Netty from 3.6.6.Final to 3.7.0.Final
* #171 Update Hazelcast from 3.0.1 to 3.0.2
* #170 Update Glokka from 1.1 to 1.2
* #178 Update Twitter Chill from 0.3.1 to 0.3.2

2.8:
* #164 Fix: publicUrl and resourceUrl return URL containing double slash if reverseProxy.baseUrl in xitrum.conf is set
* #157 Support HTTP method PATCH
* #161 Update SBT from 0.12.4 to 0.13.0
* #162 Update Akka from 2.2.0 to 2.2.1
* #158 Update Hazelcast from 2.6 to 3.0.1
* #163 Update Twitter Chill from 0.3.0 to 0.3.1

2.7:
* #152 Fix: Static files in public directory are not served on Windows
* #155 Fix: Workaround for thread safety problem of Scala reflection API
* #146 Add config option to disable auto gzip
* #140 Update Scala from 2.10.1 to 2.10.2
* #148 Update Akka from 2.1.4 to 2.2.0
* #142 Update Hazelcast from 2.5.1 to 2.6
* #153 Update Twitter Chill from 0.2.3 to 0.3.0
* #154 Update JSON4S from 3.2.4 to 3.2.5
* #147 Update RhinoCoffeeScript to 1.6.3
* #149 Update jQuery from 1.10.0 to 1.10.2
* #150 Update Knockout.js from 2.2.1 to 2.3.0

2.6:
* #135 Fix: Hangs up on cached action
* #119 Close connection after sendUnsupportedWebSocketVersionResponse
* #139 Add UnserializableSessionStore
* #136 Update Netty to 3.6.6.Final
* #133 Update Akka to 2.1.4
* #137 Update Twitter Chill to 0.2.3
* #138 Update jQuery to 1.10.0

2.5:
* #126 Basic authentication causes NullPointerException
* #127 Update Twitter Chill to 0.2.2

2.4:
* #115 Replace Javassist with ASM to reduce the number of dependencies
* #121 Update Twitter Chill to 0.2.1
* #123 Update Hazelcast to 2.5.1

2.3:
* #120 Add javacOptions -source 1.6 to avoid problem when Xitrum is built with
  Java 7 but the projects that use Xitrum are run with Java 6

2.2:
* #112 Add redirectToThis to redirect to the current action
* #113 Rename urlForPublic to publicUrl, urlForResource to resourceUrl
* #117 Apps can be configured to use no template engine
* #118 Route collecting: support getting cache annotation from superclasses

2.1:
* #110 Can't run in production mode because SockJsClassAndOptions
  in routes can't be serialized
* #111 Unify the "execute" method for Action, ActionActor,
  WebSocketActor, and SockJSActor

2.0: #104 Annotate your Akka actor to make it accessible from web
* Break actions in controller out to separate classes, each is an Action or
  an ActionActor; your action can be an actor
* Rewrite part of SockJS using ActionActor
* Add connection abort handling for SockJS
* Support "/" in SockJS path prefix
* Support WebSocket binary frame
* Allow starting server with custom Netty ChannelPipelineFactory;
  for an example, see xitrum.handler.DefaultHttpChannelPipelineFactory
* Speed up CoffeeScript compiling by using
  https://github.com/ngocdaothanh/RhinoCoffeeScript
* Use Akka log instead of using SLF4J directly
* Ignore trailing slash in URL: treat "articles" and "articles/" the same;
  note that trailing slash is not recommended since browsers do not cache page with such URL
* Update Netty to 3.6.5 (http://netty.io/news/2013/04/09/3-6-5-Final.html),
  jQuery Validate to 1.11.1 (http://bassistance.de/2013/03/22/release-validation-plugin-1-11-1/),
  Sclasner to 1.6, and xitrum-scalate to 1.1

1.22:
* #106 Update JSON4S to 3.2.4
* #107 Update Netty to 3.6.4

1.21:
* #103 Move Scalate template engine out to a separate project
* #105 Move xitrum-sbt-plugin out to a separate project
* #100 Update JSON4S to 3.2.3
* #102 Update slf4j-api to 1.7.5

1.20:
* #88 Replace JBoss Marshalling with Twitter's Chill
* #99 Use ReflectASM (included by Twitter Chill) to initiate controllers faster
* #96 Rename xitrum.util.Base64 to UrlSafeBase64, SecureBase64 to SecureUrlSafeBase64
* #97 Update SLF4J from 1.7.2 to 1.7.3, Logback from 1.0.9 to 1.0.10
  You should update Logback in your project from 1.0.9 to 1.0.10
* #98 Update Akka from 2.1.1 to 2.1.2

1.19:
* #91 Update Akka from 2.1.0 to 2.1.1
* #94 Improve Secure#unseal

1.18:
* #87 Update Netty from 3.6.2 to 3.6.3
* #90 Update jQuery Validate from 1.10.0 to 1.11.0

1.17:
* Avoid error of instantiating abstract controller while collecting routes

1.16:
* #86 Add forwardTo
* SockJS handler can now access session, request headers etc.
  def onOpen(session: immutable Map[String, Any]) -> def onOpen(controller: Controller)
* Update mime.types from https://github.com/klacke/yaws/blob/master/priv/mime.types
  (text/cache-manifest is added http://www.html5rocks.com/en/tutorials/appcache/beginner/)
* Update jQuery from 1.8.3 to 1.9.1
* Update Knockout.js from 2.2.0 to 2.2.1, its mapping plugin from 2.3.5 to 2.4.1
* Update SBT from 0.12.1 to 0.12.2
  http://www.scala-sbt.org/0.12.2/docs/Community/Changes.html

1.15:
* Improve SockJS handler interface
  def onOpen() -> def onOpen(session: immutable Map[String, Any])
  https://groups.google.com/group/xitrum-framework/browse_thread/thread/d60dbfb72556aa8c
* Add more Unicode quoting for SockJS
  https://groups.google.com/group/sockjs/msg/ff08ee1a29ac683e
* Make SockJS clusterwise, using Akka Remoting and Hazelcast
  - Add config/application.conf which loads conf/akka.conf and conf/xitrum.conf
  - Add Config.application and rename Config.config to Config.xitrum
  - Add Config.actorSystem named "xitrum"
  - Add xitrum.util.ActorCluster
    Akka Clustering is currently lacks "single actor instance" feature
    http://groups.google.com/group/akka-user/browse_thread/thread/23d6b2851648c1b0
* Update Netty from 3.6.1 to 3.6.2
  https://netty.io/Blog/Netty+362Final+released
* Update Hazelcast from 2.4.1 to 2.5
  http://www.hazelcast.com/docs/2.5/manual/multi_html/ch18s04.html
* Update jboss-marshalling from 1.3.16.GA to 1.3.17.GA

See these examples to know how to update your project from 1.14 to 1.15:
* xitrum-new: https://github.com/ngocdaothanh/xitrum-new/commit/98b1af9a006491935f217d46fedda79bd522a3c9
* xitrum-demos: https://github.com/ngocdaothanh/xitrum-demos/commit/e57872a1e7d6d74854b012e45879bf1500029217
* And xsbt-scalate-generate: https://github.com/ngocdaothanh/xitrum-new/commit/ce9d3c777fec2f0e4cacdb5171476791a572f7bc

1.14:
* Add config for template engine and Scalate template path
  http://ngocdaothanh.github.com/xitrum/guide/howto.html#create-your-own-template-engine
* Add comparison of controllers and actions
  if (currentController == MyController) ...
  if (currentAction == MyController.index) ...
  https://groups.google.com/group/xitrum-framework/browse_thread/thread/a3469fea17f84ce4
* Update Netty from 3.6.0 to 3.6.1
  https://netty.io/Blog/Netty+361Final+out+-+More+SSL+fixes
* Update Scalate from 1.6.0 to 1.6.1
  http://scalate.fusesource.org/blog/releases/release-1.6.1.html
* Update jboss-marshalling from 1.3.15.GA to 1.3.16.GA

Updating your project from Xitrum 1.13 to 1.14 is simple, see:
https://github.com/ngocdaothanh/xitrum-new/commit/fea3334ae3c7bedca1a6051d6abc851fb617d4ba

1.13:
* Update Scala from 1.9.2 to 2.10.0
    https://groups.google.com/group/akka-user/browse_thread/thread/77e1f134b5134c70
* Update Akka from 2.0.4 to 2.1.0
    http://doc.akka.io/docs/akka/2.1.0/project/migration-guide-2.0.x-2.1.x.html
* Change Scalate template directory from src/main/view/scalate to src/main/scalate
* Add network interface config to config/xitrum.conf
    https://github.com/ngocdaothanh/xitrum-new/blob/master/config/xitrum.conf
* Add request and response log at TRACE level for easier debugging
* Add log for 500 error in production mode

To update your project to use this Xitrum version:

1. Update build.sbt

  Replace:
    libraryDependencies += "tv.cntt" %% "xitrum" % "1.13"
  with:
    libraryDependencies += "tv.cntt" %% "xitrum" % "1.12"

  Replace:
    scalaVersion := "2.9.2"
    addCompilerPlugin("org.scala-lang.plugins" % "continuations" % "2.9.2")
  with:
    scalaVersion := "2.10.0"
    addCompilerPlugin("org.scala-lang.plugins" % "continuations" % "2.10.0")

  Replace:
    scalateTemplateDirectory in Compile <<= (baseDirectory) { _ / "src/main/view" }
    scalateBindings += Binding("helper", "xitrum.Controller", true)
  with:
    scalateTemplateConfig in Compile := Seq(TemplateConfig(
      file("src") / "main" / "scalate",
      Seq(),
      Seq(Binding("helper", "xitrum.Controller", true))
    ))

2. Update project/plugins.sbt

  Replace:
    addSbtPlugin("com.mojolly.scalate" % "xsbt-scalate-generator" % "x.x.x")
  with:
    addSbtPlugin("com.mojolly.scalate" % "xsbt-scalate-generator" % "0.4.1")

3. Move src/main/view/scalate to src/main/scalate

For an example, see https://github.com/ngocdaothanh/xitrum-new

1.12:
* Replace Jerkson with JSON4S (Jerkson has been abandoned)
    https://github.com/json4s/json4s
  Basically, in your code you only have to replace
    import com.codahale.jerkson.Json
  with
    import xitrum.util.Json
  Note that there are also other libs like Jacks and jackson-module-scala
    http://wiki.fasterxml.com/JacksonModuleScala
* Change config/xitrum.json to config/xitrum.conf, using
    https://github.com/typesafehub/config
  See example:
    https://github.com/ngocdaothanh/xitrum-new/blob/master/config/xitrum.conf
* Add methods to render Scalate templates directly from strings (non-file):
    renderScalateString(templateContent, templateType); templateType: "jade", "mustache", "scaml", "ssp"
    renderJadeString(templateContent)
    renderMustacheString(templateContent)
    renderScamlString(templateContent)
    renderSspString(templateContent)
  The compiled templates are not cached. If you want to control the caching, see
  Scalate doc to know how to do it yourself:
    http://scalate.fusesource.org/documentation/scalate-embedding-guide.html
    http://scalate.fusesource.org/developers.html
* Add Unicode quoting for SockJS
  https://groups.google.com/group/sockjs/msg/9da24b0dde8916e4
* Update Netty from 3.5.11.Final to 3.6.0.Final
  https://netty.io/Blog/Netty+360Final+released+-+Keep+on+moving
* Update Scalate from 1.5.3 to 1.6.0
  http://scalate.fusesource.org/blog/releases/release-1.6.0.html
* Update Knockout.mapping from 2.3.3 to 2.3.5

1.11:
* Add renderFragment(fragment: String) which renders a fragment of the current controller
* Improve exception handling by catching only Exception, Error and control flow
  Throwable like scala.runtime.NonLocalReturnControl will not be catched.
  An Error is a subclass of Throwable that indicates serious problems that a
  reasonable application should not try to catch.
  http://docs.oracle.com/javase/6/docs/api/java/lang/Error.html
* Rename hazelcast_cluster_or_super_client.xml to hazelcast_cluster_or_lite_member.xml
  From Hazelcast 2.0, SuperClient is renamed to LiteMember to avoid confusion:
  http://www.hazelcast.com/docs/2.4/manual/multi_html/ch18s04.html
* Update Hazelcast from 2.4 to 2.4.1
  This version fixes Out of Memory Error every few days:
  http://groups.google.com/group/hazelcast/browse_thread/thread/31f69d0eb89440b5/1d9ce430deffb575

1.10:
* Improve cookie API to requestCookies and responseCookies.
  Only cookies in responseCookies will be sent to browsers.
  http://ngocdaothanh.github.com/xitrum/guide/scopes.html#cookie
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/dbb7a8e638120b09
* Remove resetSession method. To reset session, call session.clear().
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/310c61f501e0bba8
* Support Scalate Mustache template
  http://ngocdaothanh.github.com/xitrum/guide/controller_action_view.html#scalate
* Fix bug with sending the last chunk in chunked mode for SockJS
  http://groups.google.com/group/sockjs/msg/d66e2978249b5f26
* Fix URL to jquery.validate-1.10.0/localization/messages_<lang>.js
  (was "jquery.validate-1.9.0/..." instead)
* Update SBT from 0.12.0 to 0.12.1
* Update Netty from 3.5.10.Final to 3.5.11.Final
  https://netty.io/Blog/Netty+3511Final+is+out
* Update Javassist from 3.16.1-GA to 3.17.1-GA (works with Java 6; 3.17.0-GA requires Java 7)
  https://issues.jboss.org/browse/JASSIST/fixforversion/12320652
* Update Sclasner from 1.1 to 1.2
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/f1ede2c56bf27e75
* Update jQuery from 1.8.2 to 1.8.3

1.9.10:
* Revert Javassist back to 3.16.1-GA because 3.17.0-GA requires Java 7
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/fe3c1be6857ff1a3

1.9.9:
* Only decode request body only when the request method is POST, PUT, or PATCH
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/f343f7bc92edb39c
* SockJS:
  - Minor bug fixes and improvements
  - Allow setting options websocket = false and cookie_needed = true
    http://groups.google.com/group/sockjs/browse_thread/thread/392cd07c4a75400b
* Update Netty from 3.5.9.Final to 3.5.10.Final
  https://netty.io/Blog/Netty+3510Final+-+Get+it+while+it+is+hot
* Update Akka from 2.0.3 to 2.0.4
  http://groups.google.com/group/akka-user/browse_thread/thread/4da3849a0a5e4163
* Update Javassist from 3.16.1-GA to 3.17.0-GA
  https://issues.jboss.org/browse/JASSIST/fixforversion/12319159
* Update Knockout.js from 2.1.0 to 2.2.0, Knockout.mapping from 2.3.2 to 2.3.3
  http://blog.stevensanderson.com/2012/10/29/knockout-2-2-0-released/
* Update SockJS JS library from 0.3.3 to 0.3.4
  http://groups.google.com/group/sockjs/browse_thread/thread/e4b2c1871601f8ae

1.9.8:
* Add support SockJS 0.3.3
  SockJS now works on a single server, next version will add cluster mode
  https://github.com/sockjs/sockjs-client
  https://github.com/sockjs/sockjs-protocol
* Add respondEventSource(data: String, event: String = "message")
  http://dev.w3.org/html5/eventsource/
* Add clientMustRevalidateStaticFiles option to config/xitrum.json
  You can force browsers to always send request to server to revalidate cache before using
  To update your existing project to use Xitrum 1.9.8, you must update "response"
  part in your xitrum.json file, example:
  https://github.com/ngocdaothanh/xitrum-new/blob/master/config/xitrum.json
* Add Akka 2.0.3 as a dependency, for use in SockJS
* Add JBoss Marshalling as dependency, for faster/smaller session cookie storing/restoring
  http://www.jboss.org/jbossmarshalling
  It features the advanced River serialization protocol which is far more
  space- and computation-efficient. It can be found in use within the excellent
  Infinispan project as well as finding heavy use in JBoss.
* Add Scalate Markdown as dependency:
  http://groups.google.com/group/xitrum-framework/browse_thread/thread/262176aa8e875940
  http://scalate.fusesource.org/documentation/jade.html
* Add Appache Commons Lang as dependency, to use its StringEscapeUtils in jsEscape:
  http://commons.apache.org/lang/api-release/org/apache/commons/lang3/StringEscapeUtils.html
* Fix bug at remoteIp when reverseProxy is enabled in config/xitrum.json
* Remove double quotes around the result of jsEscape
* Remove xitrum.comet.CometController
  Rename xitrum.comet.Comet to xitrum.sockjs.MessageQueue
* Try GZIP compressing session cookie bigger than 4KB (limit of most browsers)
  Display error log when session cookie is still bigger than 4KB after compressing
* Rename routes.sclasner to routes.cache
* Update Netty from 3.5.8.Final to 3.5.9.Final
  https://netty.io/Blog/Netty+359Final+is+out
* Update Hazelcast from 2.3.1 to 2.4
* Update Scaposer from 1.1 to 1.2
  https://github.com/ngocdaothanh/scaposer/pull/3

1.9.7:
* Fix problem when HTTPS is used and static file is bigger than
  "smallStaticFileSizeInKB" in config/xitrum.js:
  https://github.com/ngocdaothanh/xitrum/issues/64
* Fix iOS6 Safari POST caching problem by automatically setting "Cache-Control"
  header to "no-cache" for POST response:
  http://www.mnot.net/blog/2012/09/24/caching_POST
  http://stackoverflow.com/questions/12506897/is-safari-on-ios-6-caching-ajax-results
* Support HEAD (automatically handled by Xitrum as GET), OPTIONS, and PATCH
* In your controller, to prevent client-side caching, call setNoClientCache();
  It will set "Cache-Control" header to:
  "no-store, no-cache, must-revalidate, max-age=0"
* Other new methods:
  isTablet: returns true if the request is from tablet
  setClientCacheAggressively()
  respondHtml("<html>...</html>")
  respondJsonText("[1, 2, 3]")
  respondJsonP(List(1, 2, 3), "myFunction")
  respondJsonPText("[1, 2, 3]", "myFunction")
* Responding methods (respondXXX, redirectTo) now returns
  org.jboss.netty.channel.ChannelFuture
  http://static.netty.io/3.5/api/org/jboss/netty/channel/ChannelFuture.html
  You can use it to perform actions when the response has actually been sent
* Update Netty from 3.5.7.Final to 3.5.8.Final:
  https://netty.io/Blog/Netty+358Final+release+-+A+%22must%22+upgrade
* Update slf4j-api from 1.6.6 to 1.7.1
* Update jQuery from 1.7.2 to 1.8.2
* Update jQuery Validate from 1.9.0 to 1.10.0:
  http://bassistance.de/2012/09/07/release-validation-plugin-1-10-0/
* Update Knockout.js from 2.0.0 to 2.1.0
* Update Knockout.mapping from 2.0.3 to 2.3.2

1.9.6:
* Support WebSocket for iPhone Safari when running on port 80 (HTTP) or 443 (HTTPS);
  previous Xitrum versions work OK for iPhone Safari when non-standard ports are used
* Improve i18n feature, e.g. add autosetLanguage method:
  http://ngocdaothanh.github.com/xitrum/guide/i18n.html

1.9.5:
* You should upgrade to Xitrum 1.9.5 as soon as possible because there's a bug
  with file upload in Netty 3.5.5.Final:
  https://github.com/netty/netty/issues/569
* Update Netty from 3.5.5.Final to 3.5.7.Final:
  https://netty.io/Blog/Netty+357Final+released
  https://netty.io/Blog/Netty+356Final+released
* Update Hazelcast from 2.2 to 2.3.1:
  http://www.hazelcast.com/docs/2.3/manual/multi_html/ch18s04.html

1.9.4:
* Fix bug that causes non-empty 304 Not Modified response to be sent.
  This buggy response will be sent when respondFile is used in your controllers.
  You should upgrade to Xitrum 1.9.4 as soon as possible because Chrome cannot
  handle this response properly (but Firefox, Safari, and even IE can).

1.9.3:
* Update Netty from 3.5.3.Final to 3.5.5.Final:
  https://netty.io/Blog/Netty+355Final+released
  https://netty.io/Blog/Netty+354Final+out+now
* From Netty 3.5.5.Final, to delete cookie when the browser closes windows,
  set max age to Integer.MIN_VALUE, not -1 as before
* Xitrum now can serve flash socket policy file:
  http://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html
  http://www.lightsphere.com/dev/articles/flash_socket_policy.html
* config/xitrum.json is slightly improved:
  https://github.com/ngocdaothanh/xitrum-new/blob/master/config/xitrum.json
* "Cache-Control" header will be automatically set to "no-cache"
  for chunked response, e.g. when response.setChunked(true) is called
  Note that "Pragma" will not be sent because this header is for request, not response:
  http://palizine.plynt.com/issues/2008Jul/cache-control-attributes/
* Add:
    respondBinary(channelBuffer: ChannelBuffer)
    respondWebSocket(channelBuffer: ChannelBuffer)
* Avoid duplicate routes when deleting and recreating routes.sclasner
* Remove </meta>, </input>, and </link> at:
  <meta name="csrf-token" content="d1d50807-5a0a-4d42-830a-a01a3628f2c8"></meta>
  <input name="csrf-token" type="hidden" value="d1d50807-5a0a-4d42-830a-a01a3628f2c8"></input>
  <link type="text/css" media="all" rel="stylesheet" href="/resources/public/xitrum/xitrum.css?DMtin-KdUgKxwWIyHp3E4A"></link>
  You should use
    != antiCSRFMeta
    != xitrumCSS
    != antiCSRFInput
  instead of:
    = antiCSRFMeta
    = xitrumCSS
    = antiCSRFInput

1.9.2:
* Add global basic authentication to protect the whole site.
  This is usually needed when putting an unfinished site to the Internet.
  See https://github.com/ngocdaothanh/xitrum-new/blob/master/config/xitrum.json
* Improve access log to include remote IP
* Support "Range" request to static files
  Xitrum can now be used to serve interleaved MP4 movies
  (tested on iOS, Safari, Firefox, and Chrome)
  For simplicity only these specs are supported:
  bytes=123-456
  bytes=123-
* Update SBT from 0.11.3-2 to 0.12.0
* Update Hazelcast from 2.1.2 to 2.2:
  http://hazelcast.com/docs/2.2/manual/multi_html/ch18s04.html
  hazelcast_java_client.json is changed to hazelcast_java_client.properties
  See https://github.com/ngocdaothanh/xitrum-new/blob/master/config/hazelcast_java_client.properties
* Update Scaposer from 1.0 to 1.1:
  https://github.com/ngocdaothanh/scaposer/pull/2

1.9.1:
* Support "Range" request to static files
  Xitrum can now be used to serve interleaved MP4 movies
  (tested on iOS and Firefox)
  For simplicity only this spec is supported:
  bytes=123-456
* Update Netty from 3.5.0.Final to 3.5.3.Final:
  https://netty.io/Blog/Announcing+the+new+web+site+and+Netty+351Final
  https://netty.io/Blog/Netty+352Final+is+out
  https://netty.io/Blog/Say+Hello+to+Netty+353Final+
* Update Rhino from 1.7R3 to 1.7R4:
  https://developer.mozilla.org/en/New_in_Rhino_1.7R4
* Update SBT from 0.11.2 to 0.11.3-2

1.9:
* Use Netty 3.5.0.Final instead of 4.0.0.Alpha1-SNAPSHOT for file upload
  To upgrade, in your project in most cases just replace
  io.netty.xxx with org.jboss.netty.xxx
  Ex:
    Old code: import io.netty.util.CharsetUtil.UTF_8
    New code: import org.jboss.netty.util.CharsetUtil.UTF_8
* basicAuthenticate now works as documented:
  http://ngocdaothanh.github.com/xitrum/guide/howto.html#basic-authentication
* Add I18n#tf, tcf, tnf, tcnf for formatted string;
  Standard placeholders %d, %s etc. work, but if the formatted string contains
  many of them, their order should not be changed
* sbt publish-local can be run easily by anyone, not only core developers
* Update Hazelcast from 2.0.2 to 2.1.2
* Update SLF4J from 1.6.4 to 1.6.6

1.8.7:
* Add build for Scala 2.9.2
* To get URL to WebSocket action:
  ControllerObject.action.webSocketAbsoluteUrl
* Update Hazelcast from 2.0.1 to 2.0.2
* Fix #63
  https://github.com/ngocdaothanh/xitrum/issues/63

1.8.6:
* Fix WebSocket bug introduced in Xitrum 1.8.4, now WebSocket frame receiving works again
* Cleaner API for WebSocket:
  http://ngocdaothanh.github.com/xitrum/doc/async.html#websocket
* To easily put JS fragments to Scalate views, jsAtBottom is split to jsDefaults and jsForView.
  jsDefaults containing jQuery, Knockout.js etc. should be put at layout's <head>.
  jsForView containing JS fragments added by jsAddToView should be put at layout's bottom.
* Add JS utility: xitrum.appendAndScroll, see example:
  https://github.com/ngocdaothanh/xitrum-demos/blob/master/src/main/view/scalate/quickstart/controller/CometChat/index.jade

1.8.5:
* Regex can be used in routes to specify requirements:
  def show = GET("/articles/:id<[0-9]+>") { ... }
* Update Hazelcast from 2.0 to 2.0.1
* Update Javassist from 3.15.0-GA to 3.16.1-GA

1.8.4:
* Update Hazelcast from 1.9.4.8 to 2.0
* Remove ExecutionHandler.
  If your action performs a blocking operation that
  takes long time or accesses a resource which is not CPU-bound business logic
  such as DB access, you should do it in the async style (better) or use a separate
  thread pool to avoid unwanted hiccup during I/O because an I/O thread cannot
  perform I/O until your action returns the control to the I/O thread.
* For each connection, requests will be processed one by one.
  From Mongrel2: http://mongrel2.org/static/book-finalch6.html
  Where problems come in is with pipe-lined requests, meaning a browser sends a
  bunch of requests in a big blast, then hangs out for all the responses. This
  was such a horrible stupid idea that pretty much everone gets it wrong and
  doesn’t support it fully, if at all. The reason is it’s much too easy to blast
  a server with a ton of request, wait a bit so they hit proxied backends, and
  then close the socket. The web server and the backends are now screwed having
  to handle these requests which will go nowhere.

1.8.3:
* Fix https://github.com/ngocdaothanh/xitrum/issues/60

1.8.2:
* Filters now have "only" and "except"
  http://ngocdaothanh.github.com/xitrum/filter.html
* Optimize routing by using methods instead of vals
  http://ngocdaothanh.github.com/xitrum/controller_action_view.html

1.8:
* Add Scalate back, with precompilation
* Remove annotations and put related actions into controller
* Remove server-side auto-validation for postback requests and
  rewrite validators so that they can be used for any kind of requests;
  You can still use postback APIs on browser side, postback requests are easier
  to debug with Firebug or Chrome, because parameter names are no longer encrypted
* Improve data-after, now you can write
    data-after="$('#chatInput').val('')"
  instead of
    data-after="function () { $('#chatInput').val('') }"
* Add Knockout.js
* Add Scala delimited continuation
  See:
    http://www.earldouglas.com/continuation-based-web-workflows-part-two/
    http://stackoverflow.com/questions/6062003/event-listeners-with-scala-continuations
    http://jim-mcbeath.blogspot.com/2010/08/delimited-continuations.html
* Update jQuery from 1.6.4 to 1.7.1
* Fix urlForPublic bug, resulted URL now has the leading "/"
* Improve Quickstart: https://github.com/ngocdaothanh/xitrum-quickstart

1.7:
* WebSocket, see:
  http://ngocdaothanh.github.com/xitrum/async.html#websocket
  http://netty.io/blog/2011/11/17/
* Make postback tag attributes HTML5 standards-compliant:
  You must change:
    postback to data-postback
    after    to data-after
    confirum to data-confirm
* Expose APIs for data encryption so that application developers may use
  xitrum.util.{Secure, SecureBase64, SeriDeseri}
  See http://ngocdaothanh.github.com/xitrum/howto.html#encrypt-data
* Update Hazelcast from 1.9.4.4 to 1.9.4.5

1.6:
* Redesign filters to be typesafe
* Add after and around filters
* Add Loader.json and use JSON for config files
  (.json files should be used instead of .properties files)

1.5.3:
* Close connection for HTTP 1.0 clients. This allows Xitrum to be run behind
  Nginx without having to set proxy_buffering to off.
  Nginx talks HTTP/1.1 to the browser and HTTP/1.0 to the backend server, and
  it needs the backend server to close connection after finishing sending
  response to it. See http://wiki.nginx.org/HttpProxyModule.
* Fix the bug that causes connection to be closed immediately when sending file
  from action using renderFile to HTTP 1.0 clients.

1.5.2:
* Add xitrum.Config.root (like Rails.root) and fix #47
* Better API for basic authentication
* renderFile now can work with absolute path on Windows
* Exit if there's error on startup
* Update SLF4J from 1.6.2 to 1.6.4 (and Logback from 0.9.30 from to 1.0.0)
* Update Hazelcast from 1.9.4.3 to 1.9.4.4

1.5.1:
* Update Jerkson from 0.4.2 to 0.5.0

1.5:
* Static public files now do not have to have /public prefix, this is convenient
  but dynamic content perfomance decreases a little
* Applications can handle 404 and 500 errors by their own instead of using
  the default 404.html and 500.html
* Change validation syntax to allow validators to change HTML element:
  <input type="text" name={validate("username", Required)} /> now becomes
  {<input type="text" name="username" /> :: Required}

  <input type="text" name={validate("param", MaxLength(32), MyValidator)} /> now becomes
  {<input type="text" name="param" /> :: MaxLength(32) :: MyValidator}

  <input type="text" name={validate("no_need_to_validate")} /> now becomes
  {<input type="text" name="no_need_to_validate" /> :: Validated}
* Implement more validators: Email, EqualTo, Min, Max, Range, RangeLength
* Update jQuery Validation from 1.8.1 to 1.9.0:
  https://github.com/jzaefferer/jquery-validation/blob/master/changelog.txt
* Textual responses now include charset in Content-Type header:
  http://code.google.com/speed/page-speed/docs/rendering.html#SpecifyCharsetEarly
* Fix bug header not found: Content-Length for 404 and 500 content

1.4:
* Fix bug at setting Expires header for static content, it is now one year
  later instead of 17 days later
* Set Expires header for resources in classpath
* HTTPS (see config/xitrum.properties)
  KeyStore Explorer is a good tool to create self-signed keystore:
  http://www.lazgosoftware.com/kse/index.html

1.3:
* Update
    Hazelcast: 1.9.4.2 -> 1.9.4.3
    Jerkson:   0.4.1   -> 0.4.2
    SBT:       0.10.1  -> 0.11.0
* Improve performance, based on Google's best practices:
  http://code.google.com/speed/page-speed/docs/rules_intro.html
  Simple benchmark (please use httperf, ab is broken) on
  MacBook Pro 2 GHz Core i7, 8 GB memory:
    Static file:                 ~11000 req/s
    Resource file in classpath:  ~11000 req/s
    Dynamic HTML without layout: ~7000  req/s
    Dynamic HTML with layout:    ~7000  req/s
* Only gzip when client specifies "gzip" in Accept-Encoding request header

1.2:
* Conditional GET using ETag, see:
  http://stevesouders.com/hpws/rules.php
* Fix for radio: SecureBase64.encrypt always returns same output for same input
  <input type="radio" name={validate("light")} value="red" />
  <input type="radio" name={validate("light")} value="yellow" />
  <input type="radio" name={validate("light")} value="green" />

1.1:
* i18n using Scaposer
* Faster route collecting on startup using Sclasner
